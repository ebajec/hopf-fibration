#version 430 core

uniform uint count;
uniform mat4 matrix;
uniform float rand;

layout (local_size_x = 64,local_size_y =1, local_size_z = 1) in;

struct SpherePointData
{
    vec4 position;
    vec4 color;
};
layout (std430, binding = 0) buffer Points
{
    SpherePointData pointData[];
};

mat4 id = mat4(
    1,0,0,0,
    0,1,0,0,
    0,0,1,0,
    0,0,0,1
);

mat4 mat_exp(mat4 mat)
{
    mat4 result = id;// 0
    result = result + mat;//1
    mat = mat*mat;//2
    result = result + (1/2.0)*mat; 
    mat = mat*mat;//3
    result = result + (1/6.0)*mat;
    mat = mat*mat;//4
    result = result + (1/24.0)*mat;
    return result;
}

mat4 rotate(vec3 axis, float angle) 
{   
    axis = normalize(axis);
    mat3 differential = mat3(
         0,         -axis.z,   axis.y,
         axis.z,   0,         -axis.x,
        -axis.y,   axis.x,   0
    );

    mat4 rotation = mat_exp(mat4(angle*differential));
    return rotation;
} 

vec3 hsvtorgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 sphereToColor(vec3 point) {

    float u = asin(point.z)/3.141593654;
	float v = atan(point.x,point.y)/(2*3.141592654);
    return normalize(hsvtorgb(vec3(u,1,1)) + hsvtorgb(vec3(v,1,1)));
}

void main()
{
    uvec3 id = gl_GlobalInvocationID;

    if (id.x >= count)
        return;

    vec4 temp = pointData[id.x].position;
    vec3 axis = vec3(0,0,1);
    mat4 rotation = rotate(normalize(axis),0.01);
    vec4 result = rotation*temp;

    pointData[id.x].position = vec4(result.xyz,1);
    pointData[id.x].color = vec4(sphereToColor(result.xyz),1);
} 