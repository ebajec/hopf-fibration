#version 430 core

uniform uint numTriangles;
uniform uint groupSize;

layout (local_size_x = 32,local_size_y = 1,local_size_z = 1) in;

struct Vertex
{
    vec4 position;
    vec4 color;
    vec4 normal;
};

layout (std430, binding = 0) buffer VertexData
{
    Vertex vertices[];
};

layout (std430, binding = 1) buffer MeshIndices
{
    uint indices[];
};

void main()
{
    uvec3 id = gl_GlobalInvocationID;

    if (id.x > numTriangles/groupSize) return;

    uint index = 3*id.x;
    uint iv1 = indices[index + 0];
    uint iv2 = indices[index + 1];
    uint iv3 = indices[index + 2];
    vec3 v12 = vec3(vertices[iv2].position - vertices[iv1].position);
    vec3 v23 = vec3(vertices[iv3].position - vertices[iv2].position);
    vec4 normal = vec4(normalize(cross(v12,v23)),1.0);

    vertices[iv1].normal += normal;
    vertices[iv2].normal += normal;
    vertices[iv3].normal += normal;  
}