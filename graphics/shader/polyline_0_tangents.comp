#version 430 core

uniform uint numLines;

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct VertexData
{
    vec4 position;
    vec4 color;
    vec4 normal;
};

struct DrawArraysIndirectCommand
{
    uint  count;
    uint  instanceCount;
    uint  first;
    uint  baseInstance;
};

struct InstanceData
{
    DrawArraysIndirectCommand cmd;
    float width;
    float avgLength;
};

struct FrameData
{
    vec4 T;  // Tangent 
    vec4 N;  // Normal    
    vec4 B;  // Binormal
};

// Input data for each polyline. Indexed by x invocation id.
layout (std430, binding = 0) buffer InputData
{
    VertexData lineInput[];
};

// Data for each polyline instance, required to correctly access input
// and calculate mesh points. Indexed by the z invocation id.
layout (std430, binding = 1) buffer instanceData
{
    InstanceData instance[];
};

// Tangent frames for each point on each polyline. Indexed by x invocation id.
layout (std430, binding = 2) buffer frameData
{   
    FrameData frames[];
};

uvec2 getSegIndices(uint idx, uint size, uint offset) {
    uint x = (idx == size - 1) ? size - 2 : idx;
    uint y = (idx == size - 1) ? size - 1 : idx + 1;

    return uvec2(offset + x, offset + y);
}

void main() {
    uvec3 id = gl_GlobalInvocationID;

    if (id.z >= numLines)
        return;

    uint lineSize  = instance[id.z].cmd.count;
    uint offset    = instance[id.z].cmd.first;

    uint lineIndex = offset + id.x;

    if (id.x >= lineSize) return;

    uvec2 seg = getSegIndices(id.x, lineSize,offset);
    vec3 A = lineInput[seg.x].position.xyz;
    vec3 B = lineInput[seg.y].position.xyz;

    float norm = length(B - A);
    vec3 dir = (B - A)/norm;
    frames[lineIndex].T = vec4(dir,0);
}