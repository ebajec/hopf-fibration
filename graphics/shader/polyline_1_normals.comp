#version 430 core

uniform uint numLines;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 32) in;

struct VertexData
{
    vec4 position;
    vec4 color;
    vec4 normal;
};

struct DrawArraysIndirectCommand
{
    uint  count;
    uint  instanceCount;
    uint  first;
    uint  baseInstance;
};

struct InstanceData
{
    DrawArraysIndirectCommand cmd;
    float width;
    float avgLength;
};

struct FrameData
{
    vec4 T;  // Tangent 
    vec4 N;  // Normal    
    vec4 B;  // Binormal
};

// Input data for each polyline. Indexed by x invocation id.
layout (std430, binding = 0) buffer InputData
{
    VertexData lineInput[];
};

// Data for each polyline instance, required to correctly access input
// and calculate mesh points. Indexed by the z invocation id.
layout (std430, binding = 1) buffer instanceData
{
    InstanceData instance[];
};

// Tangent frames for each point on each polyline. Indexed by x invocation id.
layout (std430, binding = 2) buffer frameData
{   
    FrameData frames[];
};

uvec2 getSegIndices(uint idx, uint size, uint offset) {
    uint x = (idx == size - 1) ? size - 2 : idx;
    uint y = (idx == size - 1) ? size - 1 : idx + 1;

    return uvec2(offset + x, offset + y);
}

// Function to calculate the intersection point of a line and a plane
vec3 linePlaneIntersect(vec3 linePoint, vec3 lineDir, vec3 planePoint, vec3 planeNormal) {
    float denom = dot(planeNormal, lineDir);

    // Check if the line is parallel to the plane
    if (abs(denom) < 1e-6)
        return vec3(0, 0, 0);
    
    // Calculate the distance along the line direction to the intersection point
    float t = dot(planePoint - linePoint, planeNormal) / denom;
    
    return linePoint + t * lineDir;
}

const float epsilon = 1e-6;
const float epsilonSquared = 1e-12;

void main()
{
    uvec3 id = gl_GlobalInvocationID;

    if (id.z >= numLines)
        return;

    uint lineSize  = instance[id.z].cmd.count;
    uint offset    = instance[id.z].cmd.first;

    // Compute tangent frame for each line. Must be done sequentially.
    vec3 curDir = frames[offset].T.xyz;
    vec3 temp = frames[offset + 1].T.xyz;
    
    vec3 N = normalize(cross(temp, curDir));
    vec3 B = cross(N, curDir);

    for (uint i = 0; i < lineSize;) 
    {
        frames[offset + i].N = vec4(N, 0);
        frames[offset + i].B = vec4(B, 0);

        // Get normal to plane bisecting this segment and the next.
        uvec2 seg = getSegIndices(i, lineSize, offset);

        vec3 diff = frames[seg.x].T.xyz + frames[seg.y].T.xyz;
        vec3 bisector = normalize(diff);
    
        vec3 curPos =  lineInput[seg.x].position.xyz;
        vec3 nextPos = lineInput[seg.y].position.xyz;
        
        N = linePlaneIntersect(curPos + N, curDir, nextPos, bisector) - nextPos;
        B = linePlaneIntersect(curPos + B, curDir, nextPos, bisector) - nextPos;

        i++;
        
        curDir = frames[offset + i].T.xyz;
    }
}

