#version 430 core

uniform uint numFibers;

layout (local_size_x = 16,local_size_y = 32,local_size_z = 1) in;


struct SpherePointData
{
    vec4 position;
    vec4 color;
};

struct DrawArraysIndirectCommand
{
    uint  count;
    uint  instanceCount;
    uint  first;
    uint  baseInstance;
};

struct InstanceData
{
    DrawArraysIndirectCommand command;
    float width;
    uint padding;
};

struct LineData 
{
    vec4 position; 
    vec4 color;  
};

// Input buffer containing points on a sphere
layout (std430, binding = 0) buffer InputData
{
    SpherePointData inputData[];
};

// Data for each polyline instance, required to correctly access input
// and calculate mesh points.
layout (std430, binding = 1) buffer instanceData
{
    InstanceData instance[];
};

// Output data for each polyline. 
layout (std430, binding = 2) buffer outputData
{
    LineData outputPoints[];
};

const float PI = 3.141592654;

vec4 compute_hopf_inverse(vec4 s) {
    float t = 2*PI*s.w;
    return vec4(
        -sin(t)*(1+s.x),
        cos(t)*(1+s.x),
        cos(t)*s.y - sin(t)*s.z,
        cos(t)*s.z + sin(t)*s.y
    )/sqrt(2*(1+s.x));
}

vec4 stereo_proj(vec4 v) {
    return vec4(v.x / (1 - v.w), v.y / (1 - v.w), v.z / (1 - v.w), 1);
}


void main() {   
    uvec3 id = gl_GlobalInvocationID;

    if (id.x >= numFibers)
        return;

    uint size = instance[id.x].command.count;    
    uint offset = instance[id.x].command.first;

    vec4 s2_point = inputData[id.x].position;

    if (id.y >= size)
        return;
        
    float s = float(id.x) / float(numFibers);
    float t = float(id.y) / float(size);

    vec4 result = compute_hopf_inverse(vec4(s2_point.xyz,t));
    result = stereo_proj(result);

    outputPoints[offset + id.y].position = vec4(result.xyz,1);
    outputPoints[offset + id.y].color = inputData[id.x].color;
}
